@using OdontoFacil.Constants
@using System.Text.RegularExpressions
@model OdontoFacil.Models.Views.ScheduleAppointmentViewModel

@{
    ViewData["Title"] = "Agendar atendimento";

    bool ShouldAllowUserIdChoice()
    {
        return User.IsInRole(UserTypes.Dentist) || User.IsInRole(UserTypes.Helper);
    }

    string FormatCPF(string rawCPF)
    {
        return Regex.Replace(rawCPF, @"(\d{3})(\d{3})(\d{3})(\d{2})", @"$1.$2.$3-$4");
    }
}

@section Head {
    <link rel="stylesheet" href="~/lib/flatpickr/dist/css/flatpickr.min.css" />
}

<div class="schedule-appointment-page">
    <h1 class="title text-center">Faça aqui seu agendamento!</h1>
    <div class="row mt-5">
        <div class="offset-md-3 col-md-6">
            <form asp-controller="Appointment" id="schedule-appointment-form">
                <div asp-validation-summary="ModelOnly"></div>

                @if (ShouldAllowUserIdChoice())
                {
                    <div class="form-group mt-2 select-container">
                        <label asp-for="UserId" class="control-label"></label>
                        <select asp-for="UserId" class="form-control mt-1" autocomplete="off">
                            <option value="">Selecione o paciente</option>
                            @foreach (var User in ViewBag.Users)
                            {
                                <option value="@User.Id">
                                    @User.Name - @FormatCPF(User.CPF)
                                </option>
                            }
                        </select>
                        <span asp-validation-for="UserId" class="mt-1"></span>
                    </div>
                }
                else
                {
                    <input type="hidden" asp-for="UserId">
                }

                <div class="form-group mt-2 select-container">
                    <label asp-for="DentistId" class="control-label"></label>
                    <select asp-for="DentistId" class="form-control mt-1" autocomplete="off">
                        <option value="">Selecione o dentista...</option>
                        @foreach (var dentist in ViewBag.Dentists)
                        {
                            <option value="@dentist.Id">@dentist.User.Name</option>
                        }
                    </select>
                    <span asp-validation-for="DentistId" class="mt-1"></span>
                </div>

                <div class="form-group mt-2">
                    <label asp-for="Date" class="control-label"></label>
                    <input asp-for="Date" class="form-control mt-1" disabled autocomplete="off" />
                    <span asp-validation-for="Date" class="mt-1"></span>
                </div>

                <div class="form-group mt-2 select-container">
                    <label asp-for="Time" class="control-label"></label>
                    <select asp-for="Time" name="Time" class="form-control mt-1" disabled autocomplete="off">
                    </select>
                    <span asp-validation-for="Time" class="mt-1"></span>
                </div>
            </form>
        </div>
        <div class="d-flex col-12 col-lg-3 justify-content-center align-items-end">
            <input type="submit" value="Confirmar agendamento" class="button" formaction="/appointment/Create"
                formmethod="post" form="schedule-appointment-form" />
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="~/lib/flatpickr/dist/js/flatpickr.min.js"></script>
    <script src="~/lib/flatpickr/dist/js/i10n-pt.js"></script>

    <script>
        const state = {
            unavailableDates: [],
            unavailableHours: [],
            dateFlatPickr: null
        }

        const renderDatePicker = () => {
            const today = new Date();
            state.dateFlatPickr = $("#Date").flatpickr({
                locale: "pt",
                dateFormat: "d/m/Y",
                minDate: new Date().setDate(today.getDate() + 1),
                maxDate: new Date().setMonth(today.getMonth() + 6),
                disable: [(date) => {
                    const isWeekend = date.getDay() === 0 || date.getDay() === 6
                    const dateAsString = flatpickr.formatDate(date, "Y-m-d")
                    const { unavailableDates } = state;
                    return isWeekend || unavailableDates.includes(dateAsString)
                }]
            });
        }

        const renderTimeSelect = () => {
            const initialHour = 9;
            const lastHour = 18;
            const timeSelect = $("#Time")[0];
            timeSelect.innerHTML = '';

            const { unavailableHours } = state;

            for (let hour = initialHour; hour <= lastHour; hour++) {
                const paddedHour = hour.toString().padStart(2, '0')
                const hourString = `${paddedHour}:00`;

                if (!unavailableHours.includes(hourString)) {
                    const option = document.createElement('option');
                    option.value = hourString;
                    option.textContent = hourString;
                    timeSelect.append(option);
                }
            }
        }

        const handleDentistChange = async (event) => {
            $('#Date').prop('disabled', true);
            $('#Time').prop('disabled', true);
            $('#Date').val('');
            $('#Time').val('');

            const dentistId = event.currentTarget.value;

            if (!dentistId) {
                return
            }

            try {
                const unavailableDatesRes = await fetch(`/appointment/unavailableDates/${dentistId}`)
                const unavailableDates = await unavailableDatesRes.json()
                state.unavailableDates = unavailableDates;
                state.dateFlatPickr.redraw();
            } finally {
                $('#Date').prop('disabled', false);
            }
        }

        const handleDateChange = async (event) => {
            $('#Time').prop('disabled', true);
            $('#Time').val('');

            const dentistId = $('#DentistId').val();
            const selectedDate = event.currentTarget.value;
            const parsedDate = flatpickr.parseDate(selectedDate, "d/m/Y")
            const formateDate = flatpickr.formatDate(parsedDate, "Y-m-d")

            try {
                const unavailableHoursRes = await fetch(`/appointment/unavailableHours/${dentistId}/${formateDate}`);
                const unavailableHours = await unavailableHoursRes.json();
                state.unavailableHours = unavailableHours;
                renderTimeSelect()
            } finally {
                $('#Time').prop('disabled', false);
            }
        }

        $(document).ready(function () {
            $("#DentistId").on("change", handleDentistChange);
            $("#Date").on("change", handleDateChange);
            renderDatePicker()
        });
    </script>
}